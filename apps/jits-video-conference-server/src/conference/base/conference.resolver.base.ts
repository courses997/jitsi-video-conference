/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { Conference } from "./Conference";
import { ConferenceCountArgs } from "./ConferenceCountArgs";
import { ConferenceFindManyArgs } from "./ConferenceFindManyArgs";
import { ConferenceFindUniqueArgs } from "./ConferenceFindUniqueArgs";
import { CreateConferenceArgs } from "./CreateConferenceArgs";
import { UpdateConferenceArgs } from "./UpdateConferenceArgs";
import { DeleteConferenceArgs } from "./DeleteConferenceArgs";
import { ParticipantFindManyArgs } from "../../participant/base/ParticipantFindManyArgs";
import { Participant } from "../../participant/base/Participant";
import { ConferenceService } from "../conference.service";
@graphql.Resolver(() => Conference)
export class ConferenceResolverBase {
  constructor(protected readonly service: ConferenceService) {}

  async _conferencesMeta(
    @graphql.Args() args: ConferenceCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [Conference])
  async conferences(
    @graphql.Args() args: ConferenceFindManyArgs
  ): Promise<Conference[]> {
    return this.service.conferences(args);
  }

  @graphql.Query(() => Conference, { nullable: true })
  async conference(
    @graphql.Args() args: ConferenceFindUniqueArgs
  ): Promise<Conference | null> {
    const result = await this.service.conference(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => Conference)
  async createConference(
    @graphql.Args() args: CreateConferenceArgs
  ): Promise<Conference> {
    return await this.service.createConference({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => Conference)
  async updateConference(
    @graphql.Args() args: UpdateConferenceArgs
  ): Promise<Conference | null> {
    try {
      return await this.service.updateConference({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Conference)
  async deleteConference(
    @graphql.Args() args: DeleteConferenceArgs
  ): Promise<Conference | null> {
    try {
      return await this.service.deleteConference(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => [Participant], { name: "participants" })
  async findParticipants(
    @graphql.Parent() parent: Conference,
    @graphql.Args() args: ParticipantFindManyArgs
  ): Promise<Participant[]> {
    const results = await this.service.findParticipants(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }
}
