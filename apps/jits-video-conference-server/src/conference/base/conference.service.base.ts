/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  Conference as PrismaConference,
  Participant as PrismaParticipant,
} from "@prisma/client";

export class ConferenceServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.ConferenceCountArgs, "select">
  ): Promise<number> {
    return this.prisma.conference.count(args);
  }

  async conferences(
    args: Prisma.ConferenceFindManyArgs
  ): Promise<PrismaConference[]> {
    return this.prisma.conference.findMany(args);
  }
  async conference(
    args: Prisma.ConferenceFindUniqueArgs
  ): Promise<PrismaConference | null> {
    return this.prisma.conference.findUnique(args);
  }
  async createConference(
    args: Prisma.ConferenceCreateArgs
  ): Promise<PrismaConference> {
    return this.prisma.conference.create(args);
  }
  async updateConference(
    args: Prisma.ConferenceUpdateArgs
  ): Promise<PrismaConference> {
    return this.prisma.conference.update(args);
  }
  async deleteConference(
    args: Prisma.ConferenceDeleteArgs
  ): Promise<PrismaConference> {
    return this.prisma.conference.delete(args);
  }

  async findParticipants(
    parentId: string,
    args: Prisma.ParticipantFindManyArgs
  ): Promise<PrismaParticipant[]> {
    return this.prisma.conference
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .participants(args);
  }
}
